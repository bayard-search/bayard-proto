// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.9.2
// source: indexpb.proto

package proto

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type SearchReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query         string   `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	From          uint64   `protobuf:"varint,2,opt,name=from,proto3" json:"from,omitempty"`
	Limit         uint64   `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	ExcludeCount  bool     `protobuf:"varint,4,opt,name=exclude_count,json=excludeCount,proto3" json:"exclude_count,omitempty"`
	ExcludeDocs   bool     `protobuf:"varint,5,opt,name=exclude_docs,json=excludeDocs,proto3" json:"exclude_docs,omitempty"`
	FacetField    string   `protobuf:"bytes,6,opt,name=facet_field,json=facetField,proto3" json:"facet_field,omitempty"`
	FacetPrefixes []string `protobuf:"bytes,7,rep,name=facet_prefixes,json=facetPrefixes,proto3" json:"facet_prefixes,omitempty"`
	ClientId      uint64   `protobuf:"varint,8,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
}

func (x *SearchReq) Reset() {
	*x = SearchReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexpb_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchReq) ProtoMessage() {}

func (x *SearchReq) ProtoReflect() protoreflect.Message {
	mi := &file_indexpb_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchReq.ProtoReflect.Descriptor instead.
func (*SearchReq) Descriptor() ([]byte, []int) {
	return file_indexpb_proto_rawDescGZIP(), []int{0}
}

func (x *SearchReq) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *SearchReq) GetFrom() uint64 {
	if x != nil {
		return x.From
	}
	return 0
}

func (x *SearchReq) GetLimit() uint64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *SearchReq) GetExcludeCount() bool {
	if x != nil {
		return x.ExcludeCount
	}
	return false
}

func (x *SearchReq) GetExcludeDocs() bool {
	if x != nil {
		return x.ExcludeDocs
	}
	return false
}

func (x *SearchReq) GetFacetField() string {
	if x != nil {
		return x.FacetField
	}
	return ""
}

func (x *SearchReq) GetFacetPrefixes() []string {
	if x != nil {
		return x.FacetPrefixes
	}
	return nil
}

func (x *SearchReq) GetClientId() uint64 {
	if x != nil {
		return x.ClientId
	}
	return 0
}

type SearchReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State        State  `protobuf:"varint,1,opt,name=state,proto3,enum=bayard.common.State" json:"state,omitempty"`
	SearchResult string `protobuf:"bytes,2,opt,name=search_result,json=searchResult,proto3" json:"search_result,omitempty"`
	AddressMap   []byte `protobuf:"bytes,3,opt,name=address_map,json=addressMap,proto3" json:"address_map,omitempty"`
	LeaderId     uint64 `protobuf:"varint,4,opt,name=leader_id,json=leaderId,proto3" json:"leader_id,omitempty"`
}

func (x *SearchReply) Reset() {
	*x = SearchReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexpb_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchReply) ProtoMessage() {}

func (x *SearchReply) ProtoReflect() protoreflect.Message {
	mi := &file_indexpb_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchReply.ProtoReflect.Descriptor instead.
func (*SearchReply) Descriptor() ([]byte, []int) {
	return file_indexpb_proto_rawDescGZIP(), []int{1}
}

func (x *SearchReply) GetState() State {
	if x != nil {
		return x.State
	}
	return State_OK
}

func (x *SearchReply) GetSearchResult() string {
	if x != nil {
		return x.SearchResult
	}
	return ""
}

func (x *SearchReply) GetAddressMap() []byte {
	if x != nil {
		return x.AddressMap
	}
	return nil
}

func (x *SearchReply) GetLeaderId() uint64 {
	if x != nil {
		return x.LeaderId
	}
	return 0
}

type GetReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ClientId uint64 `protobuf:"varint,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
}

func (x *GetReq) Reset() {
	*x = GetReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexpb_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReq) ProtoMessage() {}

func (x *GetReq) ProtoReflect() protoreflect.Message {
	mi := &file_indexpb_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReq.ProtoReflect.Descriptor instead.
func (*GetReq) Descriptor() ([]byte, []int) {
	return file_indexpb_proto_rawDescGZIP(), []int{2}
}

func (x *GetReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetReq) GetClientId() uint64 {
	if x != nil {
		return x.ClientId
	}
	return 0
}

type GetReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State      State  `protobuf:"varint,1,opt,name=state,proto3,enum=bayard.common.State" json:"state,omitempty"`
	Doc        string `protobuf:"bytes,2,opt,name=doc,proto3" json:"doc,omitempty"`
	AddressMap []byte `protobuf:"bytes,3,opt,name=address_map,json=addressMap,proto3" json:"address_map,omitempty"`
	LeaderId   uint64 `protobuf:"varint,4,opt,name=leader_id,json=leaderId,proto3" json:"leader_id,omitempty"`
}

func (x *GetReply) Reset() {
	*x = GetReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexpb_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReply) ProtoMessage() {}

func (x *GetReply) ProtoReflect() protoreflect.Message {
	mi := &file_indexpb_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReply.ProtoReflect.Descriptor instead.
func (*GetReply) Descriptor() ([]byte, []int) {
	return file_indexpb_proto_rawDescGZIP(), []int{3}
}

func (x *GetReply) GetState() State {
	if x != nil {
		return x.State
	}
	return State_OK
}

func (x *GetReply) GetDoc() string {
	if x != nil {
		return x.Doc
	}
	return ""
}

func (x *GetReply) GetAddressMap() []byte {
	if x != nil {
		return x.AddressMap
	}
	return nil
}

func (x *GetReply) GetLeaderId() uint64 {
	if x != nil {
		return x.LeaderId
	}
	return 0
}

type SetReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Doc      string `protobuf:"bytes,1,opt,name=doc,proto3" json:"doc,omitempty"`
	ClientId uint64 `protobuf:"varint,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
}

func (x *SetReq) Reset() {
	*x = SetReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexpb_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetReq) ProtoMessage() {}

func (x *SetReq) ProtoReflect() protoreflect.Message {
	mi := &file_indexpb_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetReq.ProtoReflect.Descriptor instead.
func (*SetReq) Descriptor() ([]byte, []int) {
	return file_indexpb_proto_rawDescGZIP(), []int{4}
}

func (x *SetReq) GetDoc() string {
	if x != nil {
		return x.Doc
	}
	return ""
}

func (x *SetReq) GetClientId() uint64 {
	if x != nil {
		return x.ClientId
	}
	return 0
}

type SetReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State      State  `protobuf:"varint,1,opt,name=state,proto3,enum=bayard.common.State" json:"state,omitempty"`
	AddressMap []byte `protobuf:"bytes,2,opt,name=address_map,json=addressMap,proto3" json:"address_map,omitempty"`
	LeaderId   uint64 `protobuf:"varint,3,opt,name=leader_id,json=leaderId,proto3" json:"leader_id,omitempty"`
}

func (x *SetReply) Reset() {
	*x = SetReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexpb_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetReply) ProtoMessage() {}

func (x *SetReply) ProtoReflect() protoreflect.Message {
	mi := &file_indexpb_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetReply.ProtoReflect.Descriptor instead.
func (*SetReply) Descriptor() ([]byte, []int) {
	return file_indexpb_proto_rawDescGZIP(), []int{5}
}

func (x *SetReply) GetState() State {
	if x != nil {
		return x.State
	}
	return State_OK
}

func (x *SetReply) GetAddressMap() []byte {
	if x != nil {
		return x.AddressMap
	}
	return nil
}

func (x *SetReply) GetLeaderId() uint64 {
	if x != nil {
		return x.LeaderId
	}
	return 0
}

type DeleteReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ClientId uint64 `protobuf:"varint,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
}

func (x *DeleteReq) Reset() {
	*x = DeleteReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexpb_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteReq) ProtoMessage() {}

func (x *DeleteReq) ProtoReflect() protoreflect.Message {
	mi := &file_indexpb_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteReq.ProtoReflect.Descriptor instead.
func (*DeleteReq) Descriptor() ([]byte, []int) {
	return file_indexpb_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeleteReq) GetClientId() uint64 {
	if x != nil {
		return x.ClientId
	}
	return 0
}

type DeleteReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State      State  `protobuf:"varint,1,opt,name=state,proto3,enum=bayard.common.State" json:"state,omitempty"`
	AddressMap []byte `protobuf:"bytes,2,opt,name=address_map,json=addressMap,proto3" json:"address_map,omitempty"`
	LeaderId   uint64 `protobuf:"varint,3,opt,name=leader_id,json=leaderId,proto3" json:"leader_id,omitempty"`
}

func (x *DeleteReply) Reset() {
	*x = DeleteReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexpb_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteReply) ProtoMessage() {}

func (x *DeleteReply) ProtoReflect() protoreflect.Message {
	mi := &file_indexpb_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteReply.ProtoReflect.Descriptor instead.
func (*DeleteReply) Descriptor() ([]byte, []int) {
	return file_indexpb_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteReply) GetState() State {
	if x != nil {
		return x.State
	}
	return State_OK
}

func (x *DeleteReply) GetAddressMap() []byte {
	if x != nil {
		return x.AddressMap
	}
	return nil
}

func (x *DeleteReply) GetLeaderId() uint64 {
	if x != nil {
		return x.LeaderId
	}
	return 0
}

type BulkSetReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Docs     string `protobuf:"bytes,1,opt,name=docs,proto3" json:"docs,omitempty"`
	ClientId uint64 `protobuf:"varint,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
}

func (x *BulkSetReq) Reset() {
	*x = BulkSetReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexpb_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkSetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkSetReq) ProtoMessage() {}

func (x *BulkSetReq) ProtoReflect() protoreflect.Message {
	mi := &file_indexpb_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkSetReq.ProtoReflect.Descriptor instead.
func (*BulkSetReq) Descriptor() ([]byte, []int) {
	return file_indexpb_proto_rawDescGZIP(), []int{8}
}

func (x *BulkSetReq) GetDocs() string {
	if x != nil {
		return x.Docs
	}
	return ""
}

func (x *BulkSetReq) GetClientId() uint64 {
	if x != nil {
		return x.ClientId
	}
	return 0
}

type BulkSetReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State      State  `protobuf:"varint,1,opt,name=state,proto3,enum=bayard.common.State" json:"state,omitempty"`
	AddressMap []byte `protobuf:"bytes,2,opt,name=address_map,json=addressMap,proto3" json:"address_map,omitempty"`
	LeaderId   uint64 `protobuf:"varint,3,opt,name=leader_id,json=leaderId,proto3" json:"leader_id,omitempty"`
}

func (x *BulkSetReply) Reset() {
	*x = BulkSetReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexpb_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkSetReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkSetReply) ProtoMessage() {}

func (x *BulkSetReply) ProtoReflect() protoreflect.Message {
	mi := &file_indexpb_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkSetReply.ProtoReflect.Descriptor instead.
func (*BulkSetReply) Descriptor() ([]byte, []int) {
	return file_indexpb_proto_rawDescGZIP(), []int{9}
}

func (x *BulkSetReply) GetState() State {
	if x != nil {
		return x.State
	}
	return State_OK
}

func (x *BulkSetReply) GetAddressMap() []byte {
	if x != nil {
		return x.AddressMap
	}
	return nil
}

func (x *BulkSetReply) GetLeaderId() uint64 {
	if x != nil {
		return x.LeaderId
	}
	return 0
}

type BulkDeleteReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Docs     string `protobuf:"bytes,1,opt,name=docs,proto3" json:"docs,omitempty"`
	ClientId uint64 `protobuf:"varint,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
}

func (x *BulkDeleteReq) Reset() {
	*x = BulkDeleteReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexpb_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkDeleteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkDeleteReq) ProtoMessage() {}

func (x *BulkDeleteReq) ProtoReflect() protoreflect.Message {
	mi := &file_indexpb_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkDeleteReq.ProtoReflect.Descriptor instead.
func (*BulkDeleteReq) Descriptor() ([]byte, []int) {
	return file_indexpb_proto_rawDescGZIP(), []int{10}
}

func (x *BulkDeleteReq) GetDocs() string {
	if x != nil {
		return x.Docs
	}
	return ""
}

func (x *BulkDeleteReq) GetClientId() uint64 {
	if x != nil {
		return x.ClientId
	}
	return 0
}

type BulkDeleteReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State      State  `protobuf:"varint,1,opt,name=state,proto3,enum=bayard.common.State" json:"state,omitempty"`
	AddressMap []byte `protobuf:"bytes,2,opt,name=address_map,json=addressMap,proto3" json:"address_map,omitempty"`
	LeaderId   uint64 `protobuf:"varint,3,opt,name=leader_id,json=leaderId,proto3" json:"leader_id,omitempty"`
}

func (x *BulkDeleteReply) Reset() {
	*x = BulkDeleteReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexpb_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkDeleteReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkDeleteReply) ProtoMessage() {}

func (x *BulkDeleteReply) ProtoReflect() protoreflect.Message {
	mi := &file_indexpb_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkDeleteReply.ProtoReflect.Descriptor instead.
func (*BulkDeleteReply) Descriptor() ([]byte, []int) {
	return file_indexpb_proto_rawDescGZIP(), []int{11}
}

func (x *BulkDeleteReply) GetState() State {
	if x != nil {
		return x.State
	}
	return State_OK
}

func (x *BulkDeleteReply) GetAddressMap() []byte {
	if x != nil {
		return x.AddressMap
	}
	return nil
}

func (x *BulkDeleteReply) GetLeaderId() uint64 {
	if x != nil {
		return x.LeaderId
	}
	return 0
}

type CommitReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId uint64 `protobuf:"varint,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
}

func (x *CommitReq) Reset() {
	*x = CommitReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexpb_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitReq) ProtoMessage() {}

func (x *CommitReq) ProtoReflect() protoreflect.Message {
	mi := &file_indexpb_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitReq.ProtoReflect.Descriptor instead.
func (*CommitReq) Descriptor() ([]byte, []int) {
	return file_indexpb_proto_rawDescGZIP(), []int{12}
}

func (x *CommitReq) GetClientId() uint64 {
	if x != nil {
		return x.ClientId
	}
	return 0
}

type CommitReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State      State  `protobuf:"varint,1,opt,name=state,proto3,enum=bayard.common.State" json:"state,omitempty"`
	AddressMap []byte `protobuf:"bytes,2,opt,name=address_map,json=addressMap,proto3" json:"address_map,omitempty"`
	LeaderId   uint64 `protobuf:"varint,3,opt,name=leader_id,json=leaderId,proto3" json:"leader_id,omitempty"`
}

func (x *CommitReply) Reset() {
	*x = CommitReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexpb_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitReply) ProtoMessage() {}

func (x *CommitReply) ProtoReflect() protoreflect.Message {
	mi := &file_indexpb_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitReply.ProtoReflect.Descriptor instead.
func (*CommitReply) Descriptor() ([]byte, []int) {
	return file_indexpb_proto_rawDescGZIP(), []int{13}
}

func (x *CommitReply) GetState() State {
	if x != nil {
		return x.State
	}
	return State_OK
}

func (x *CommitReply) GetAddressMap() []byte {
	if x != nil {
		return x.AddressMap
	}
	return nil
}

func (x *CommitReply) GetLeaderId() uint64 {
	if x != nil {
		return x.LeaderId
	}
	return 0
}

type RollbackReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId uint64 `protobuf:"varint,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
}

func (x *RollbackReq) Reset() {
	*x = RollbackReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexpb_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RollbackReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RollbackReq) ProtoMessage() {}

func (x *RollbackReq) ProtoReflect() protoreflect.Message {
	mi := &file_indexpb_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RollbackReq.ProtoReflect.Descriptor instead.
func (*RollbackReq) Descriptor() ([]byte, []int) {
	return file_indexpb_proto_rawDescGZIP(), []int{14}
}

func (x *RollbackReq) GetClientId() uint64 {
	if x != nil {
		return x.ClientId
	}
	return 0
}

type RollbackReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State      State  `protobuf:"varint,1,opt,name=state,proto3,enum=bayard.common.State" json:"state,omitempty"`
	AddressMap []byte `protobuf:"bytes,2,opt,name=address_map,json=addressMap,proto3" json:"address_map,omitempty"`
	LeaderId   uint64 `protobuf:"varint,3,opt,name=leader_id,json=leaderId,proto3" json:"leader_id,omitempty"`
}

func (x *RollbackReply) Reset() {
	*x = RollbackReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexpb_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RollbackReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RollbackReply) ProtoMessage() {}

func (x *RollbackReply) ProtoReflect() protoreflect.Message {
	mi := &file_indexpb_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RollbackReply.ProtoReflect.Descriptor instead.
func (*RollbackReply) Descriptor() ([]byte, []int) {
	return file_indexpb_proto_rawDescGZIP(), []int{15}
}

func (x *RollbackReply) GetState() State {
	if x != nil {
		return x.State
	}
	return State_OK
}

func (x *RollbackReply) GetAddressMap() []byte {
	if x != nil {
		return x.AddressMap
	}
	return nil
}

func (x *RollbackReply) GetLeaderId() uint64 {
	if x != nil {
		return x.LeaderId
	}
	return 0
}

type MergeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId uint64 `protobuf:"varint,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
}

func (x *MergeReq) Reset() {
	*x = MergeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexpb_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MergeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MergeReq) ProtoMessage() {}

func (x *MergeReq) ProtoReflect() protoreflect.Message {
	mi := &file_indexpb_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MergeReq.ProtoReflect.Descriptor instead.
func (*MergeReq) Descriptor() ([]byte, []int) {
	return file_indexpb_proto_rawDescGZIP(), []int{16}
}

func (x *MergeReq) GetClientId() uint64 {
	if x != nil {
		return x.ClientId
	}
	return 0
}

type MergeReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State      State  `protobuf:"varint,1,opt,name=state,proto3,enum=bayard.common.State" json:"state,omitempty"`
	AddressMap []byte `protobuf:"bytes,2,opt,name=address_map,json=addressMap,proto3" json:"address_map,omitempty"`
	LeaderId   uint64 `protobuf:"varint,3,opt,name=leader_id,json=leaderId,proto3" json:"leader_id,omitempty"`
}

func (x *MergeReply) Reset() {
	*x = MergeReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexpb_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MergeReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MergeReply) ProtoMessage() {}

func (x *MergeReply) ProtoReflect() protoreflect.Message {
	mi := &file_indexpb_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MergeReply.ProtoReflect.Descriptor instead.
func (*MergeReply) Descriptor() ([]byte, []int) {
	return file_indexpb_proto_rawDescGZIP(), []int{17}
}

func (x *MergeReply) GetState() State {
	if x != nil {
		return x.State
	}
	return State_OK
}

func (x *MergeReply) GetAddressMap() []byte {
	if x != nil {
		return x.AddressMap
	}
	return nil
}

func (x *MergeReply) GetLeaderId() uint64 {
	if x != nil {
		return x.LeaderId
	}
	return 0
}

type SchemaReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId uint64 `protobuf:"varint,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	Seq      uint64 `protobuf:"varint,2,opt,name=seq,proto3" json:"seq,omitempty"`
}

func (x *SchemaReq) Reset() {
	*x = SchemaReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexpb_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SchemaReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchemaReq) ProtoMessage() {}

func (x *SchemaReq) ProtoReflect() protoreflect.Message {
	mi := &file_indexpb_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchemaReq.ProtoReflect.Descriptor instead.
func (*SchemaReq) Descriptor() ([]byte, []int) {
	return file_indexpb_proto_rawDescGZIP(), []int{18}
}

func (x *SchemaReq) GetClientId() uint64 {
	if x != nil {
		return x.ClientId
	}
	return 0
}

func (x *SchemaReq) GetSeq() uint64 {
	if x != nil {
		return x.Seq
	}
	return 0
}

type SchemaReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State      State  `protobuf:"varint,1,opt,name=state,proto3,enum=bayard.common.State" json:"state,omitempty"`
	Schema     string `protobuf:"bytes,2,opt,name=schema,proto3" json:"schema,omitempty"`
	AddressMap []byte `protobuf:"bytes,3,opt,name=address_map,json=addressMap,proto3" json:"address_map,omitempty"`
	LeaderId   uint64 `protobuf:"varint,4,opt,name=leader_id,json=leaderId,proto3" json:"leader_id,omitempty"`
}

func (x *SchemaReply) Reset() {
	*x = SchemaReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexpb_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SchemaReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchemaReply) ProtoMessage() {}

func (x *SchemaReply) ProtoReflect() protoreflect.Message {
	mi := &file_indexpb_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchemaReply.ProtoReflect.Descriptor instead.
func (*SchemaReply) Descriptor() ([]byte, []int) {
	return file_indexpb_proto_rawDescGZIP(), []int{19}
}

func (x *SchemaReply) GetState() State {
	if x != nil {
		return x.State
	}
	return State_OK
}

func (x *SchemaReply) GetSchema() string {
	if x != nil {
		return x.Schema
	}
	return ""
}

func (x *SchemaReply) GetAddressMap() []byte {
	if x != nil {
		return x.AddressMap
	}
	return nil
}

func (x *SchemaReply) GetLeaderId() uint64 {
	if x != nil {
		return x.LeaderId
	}
	return 0
}

type StatusReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId uint64 `protobuf:"varint,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
}

func (x *StatusReq) Reset() {
	*x = StatusReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexpb_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusReq) ProtoMessage() {}

func (x *StatusReq) ProtoReflect() protoreflect.Message {
	mi := &file_indexpb_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusReq.ProtoReflect.Descriptor instead.
func (*StatusReq) Descriptor() ([]byte, []int) {
	return file_indexpb_proto_rawDescGZIP(), []int{20}
}

func (x *StatusReq) GetClientId() uint64 {
	if x != nil {
		return x.ClientId
	}
	return 0
}

type StatusReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State      State  `protobuf:"varint,1,opt,name=state,proto3,enum=bayard.common.State" json:"state,omitempty"`
	Status     string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	AddressMap []byte `protobuf:"bytes,3,opt,name=address_map,json=addressMap,proto3" json:"address_map,omitempty"`
	LeaderId   uint64 `protobuf:"varint,4,opt,name=leader_id,json=leaderId,proto3" json:"leader_id,omitempty"`
}

func (x *StatusReply) Reset() {
	*x = StatusReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexpb_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusReply) ProtoMessage() {}

func (x *StatusReply) ProtoReflect() protoreflect.Message {
	mi := &file_indexpb_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusReply.ProtoReflect.Descriptor instead.
func (*StatusReply) Descriptor() ([]byte, []int) {
	return file_indexpb_proto_rawDescGZIP(), []int{21}
}

func (x *StatusReply) GetState() State {
	if x != nil {
		return x.State
	}
	return State_OK
}

func (x *StatusReply) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *StatusReply) GetAddressMap() []byte {
	if x != nil {
		return x.AddressMap
	}
	return nil
}

func (x *StatusReply) GetLeaderId() uint64 {
	if x != nil {
		return x.LeaderId
	}
	return 0
}

var File_indexpb_proto protoreflect.FileDescriptor

var file_indexpb_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x70, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0c, 0x62, 0x61, 0x79, 0x61, 0x72, 0x64, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x1a, 0x0e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf8, 0x01,
	0x0a, 0x09, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x65,
	0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0c, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x64, 0x6f, 0x63, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x44,
	0x6f, 0x63, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x61, 0x63, 0x65, 0x74, 0x5f, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x61, 0x63, 0x65, 0x74, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x61, 0x63, 0x65, 0x74, 0x5f, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x61,
	0x63, 0x65, 0x74, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x9c, 0x01, 0x0a, 0x0b, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x62, 0x61, 0x79, 0x61, 0x72, 0x64,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4d, 0x61, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0x35, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x86,
	0x01, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x62, 0x61, 0x79,
	0x61, 0x72, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x6f, 0x63, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x6f, 0x63, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4d, 0x61, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0x37, 0x0a, 0x06, 0x53, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x6f, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x64, 0x6f, 0x63, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x22, 0x74, 0x0a, 0x08, 0x53, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2a, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x62, 0x61,
	0x79, 0x61, 0x72, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4d, 0x61, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0x38, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x22, 0x77, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x2a, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14,
	0x2e, 0x62, 0x61, 0x79, 0x61, 0x72, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0a, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4d, 0x61, 0x70, 0x12, 0x1b, 0x0a, 0x09,
	0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0x3d, 0x0a, 0x0a, 0x42, 0x75, 0x6c,
	0x6b, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x6f, 0x63, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x6f, 0x63, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x78, 0x0a, 0x0c, 0x42, 0x75, 0x6c, 0x6b,
	0x53, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x62, 0x61, 0x79, 0x61, 0x72, 0x64,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f,
	0x6d, 0x61, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x4d, 0x61, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x49, 0x64, 0x22, 0x40, 0x0a, 0x0d, 0x42, 0x75, 0x6c, 0x6b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x6f, 0x63, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x64, 0x6f, 0x63, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x22, 0x7b, 0x0a, 0x0f, 0x42, 0x75, 0x6c, 0x6b, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x62, 0x61, 0x79, 0x61, 0x72, 0x64, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6d,
	0x61, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x4d, 0x61, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49,
	0x64, 0x22, 0x28, 0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1b,
	0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x77, 0x0a, 0x0b, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x62, 0x61, 0x79, 0x61,
	0x72, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x4d, 0x61, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x49, 0x64, 0x22, 0x2a, 0x0a, 0x0b, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b,
	0x52, 0x65, 0x71, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x22, 0x79, 0x0a, 0x0d, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x2a, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x14, 0x2e, 0x62, 0x61, 0x79, 0x61, 0x72, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0a, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4d, 0x61, 0x70, 0x12, 0x1b,
	0x0a, 0x09, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0x27, 0x0a, 0x08, 0x4d,
	0x65, 0x72, 0x67, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x22, 0x76, 0x0a, 0x0a, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x14, 0x2e, 0x62, 0x61, 0x79, 0x61, 0x72, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0a, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4d, 0x61, 0x70, 0x12,
	0x1b, 0x0a, 0x09, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0x3a, 0x0a, 0x09,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x71, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x71, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x03, 0x73, 0x65, 0x71, 0x22, 0x8f, 0x01, 0x0a, 0x0b, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x62, 0x61, 0x79, 0x61, 0x72, 0x64,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x1f, 0x0a, 0x0b,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0a, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4d, 0x61, 0x70, 0x12, 0x1b, 0x0a,
	0x09, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0x28, 0x0a, 0x09, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x22, 0x8f, 0x01, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x62, 0x61, 0x79, 0x61, 0x72, 0x64, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4d, 0x61, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x32, 0xce, 0x05, 0x0a, 0x0c, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x35, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x14,
	0x2e, 0x62, 0x61, 0x79, 0x61, 0x72, 0x64, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x62, 0x61, 0x79, 0x61, 0x72, 0x64, 0x2e, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x3e,
	0x0a, 0x06, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x17, 0x2e, 0x62, 0x61, 0x79, 0x61, 0x72,
	0x64, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65,
	0x71, 0x1a, 0x19, 0x2e, 0x62, 0x61, 0x79, 0x61, 0x72, 0x64, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x35,
	0x0a, 0x03, 0x53, 0x65, 0x74, 0x12, 0x14, 0x2e, 0x62, 0x61, 0x79, 0x61, 0x72, 0x64, 0x2e, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x2e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x62, 0x61,
	0x79, 0x61, 0x72, 0x64, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x53, 0x65, 0x74, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12,
	0x17, 0x2e, 0x62, 0x61, 0x79, 0x61, 0x72, 0x64, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x62, 0x61, 0x79, 0x61, 0x72,
	0x64, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x07, 0x42, 0x75, 0x6c, 0x6b, 0x53, 0x65, 0x74,
	0x12, 0x18, 0x2e, 0x62, 0x61, 0x79, 0x61, 0x72, 0x64, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e,
	0x42, 0x75, 0x6c, 0x6b, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x62, 0x61, 0x79,
	0x61, 0x72, 0x64, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x53, 0x65,
	0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x0a, 0x42, 0x75, 0x6c, 0x6b,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x1b, 0x2e, 0x62, 0x61, 0x79, 0x61, 0x72, 0x64, 0x2e,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x62, 0x61, 0x79, 0x61, 0x72, 0x64, 0x2e, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x06, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x17,
	0x2e, 0x62, 0x61, 0x79, 0x61, 0x72, 0x64, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x62, 0x61, 0x79, 0x61, 0x72, 0x64,
	0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x08, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b,
	0x12, 0x19, 0x2e, 0x62, 0x61, 0x79, 0x61, 0x72, 0x64, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e,
	0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x62, 0x61,
	0x79, 0x61, 0x72, 0x64, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x52, 0x6f, 0x6c, 0x6c, 0x62,
	0x61, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x05, 0x4d, 0x65,
	0x72, 0x67, 0x65, 0x12, 0x16, 0x2e, 0x62, 0x61, 0x79, 0x61, 0x72, 0x64, 0x2e, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x2e, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x62, 0x61,
	0x79, 0x61, 0x72, 0x64, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x4d, 0x65, 0x72, 0x67, 0x65,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x06, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x12, 0x17, 0x2e, 0x62, 0x61, 0x79, 0x61, 0x72, 0x64, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x62, 0x61, 0x79,
	0x61, 0x72, 0x64, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x17, 0x2e, 0x62, 0x61, 0x79, 0x61, 0x72, 0x64, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x62, 0x61, 0x79,
	0x61, 0x72, 0x64, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x42, 0x0b, 0x5a, 0x09, 0x70, 0x6b, 0x67, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_indexpb_proto_rawDescOnce sync.Once
	file_indexpb_proto_rawDescData = file_indexpb_proto_rawDesc
)

func file_indexpb_proto_rawDescGZIP() []byte {
	file_indexpb_proto_rawDescOnce.Do(func() {
		file_indexpb_proto_rawDescData = protoimpl.X.CompressGZIP(file_indexpb_proto_rawDescData)
	})
	return file_indexpb_proto_rawDescData
}

var file_indexpb_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_indexpb_proto_goTypes = []interface{}{
	(*SearchReq)(nil),       // 0: bayard.index.SearchReq
	(*SearchReply)(nil),     // 1: bayard.index.SearchReply
	(*GetReq)(nil),          // 2: bayard.index.GetReq
	(*GetReply)(nil),        // 3: bayard.index.GetReply
	(*SetReq)(nil),          // 4: bayard.index.SetReq
	(*SetReply)(nil),        // 5: bayard.index.SetReply
	(*DeleteReq)(nil),       // 6: bayard.index.DeleteReq
	(*DeleteReply)(nil),     // 7: bayard.index.DeleteReply
	(*BulkSetReq)(nil),      // 8: bayard.index.BulkSetReq
	(*BulkSetReply)(nil),    // 9: bayard.index.BulkSetReply
	(*BulkDeleteReq)(nil),   // 10: bayard.index.BulkDeleteReq
	(*BulkDeleteReply)(nil), // 11: bayard.index.BulkDeleteReply
	(*CommitReq)(nil),       // 12: bayard.index.CommitReq
	(*CommitReply)(nil),     // 13: bayard.index.CommitReply
	(*RollbackReq)(nil),     // 14: bayard.index.RollbackReq
	(*RollbackReply)(nil),   // 15: bayard.index.RollbackReply
	(*MergeReq)(nil),        // 16: bayard.index.MergeReq
	(*MergeReply)(nil),      // 17: bayard.index.MergeReply
	(*SchemaReq)(nil),       // 18: bayard.index.SchemaReq
	(*SchemaReply)(nil),     // 19: bayard.index.SchemaReply
	(*StatusReq)(nil),       // 20: bayard.index.StatusReq
	(*StatusReply)(nil),     // 21: bayard.index.StatusReply
	(State)(0),              // 22: bayard.common.State
}
var file_indexpb_proto_depIdxs = []int32{
	22, // 0: bayard.index.SearchReply.state:type_name -> bayard.common.State
	22, // 1: bayard.index.GetReply.state:type_name -> bayard.common.State
	22, // 2: bayard.index.SetReply.state:type_name -> bayard.common.State
	22, // 3: bayard.index.DeleteReply.state:type_name -> bayard.common.State
	22, // 4: bayard.index.BulkSetReply.state:type_name -> bayard.common.State
	22, // 5: bayard.index.BulkDeleteReply.state:type_name -> bayard.common.State
	22, // 6: bayard.index.CommitReply.state:type_name -> bayard.common.State
	22, // 7: bayard.index.RollbackReply.state:type_name -> bayard.common.State
	22, // 8: bayard.index.MergeReply.state:type_name -> bayard.common.State
	22, // 9: bayard.index.SchemaReply.state:type_name -> bayard.common.State
	22, // 10: bayard.index.StatusReply.state:type_name -> bayard.common.State
	2,  // 11: bayard.index.IndexService.Get:input_type -> bayard.index.GetReq
	0,  // 12: bayard.index.IndexService.Search:input_type -> bayard.index.SearchReq
	4,  // 13: bayard.index.IndexService.Set:input_type -> bayard.index.SetReq
	6,  // 14: bayard.index.IndexService.Delete:input_type -> bayard.index.DeleteReq
	8,  // 15: bayard.index.IndexService.BulkSet:input_type -> bayard.index.BulkSetReq
	10, // 16: bayard.index.IndexService.BulkDelete:input_type -> bayard.index.BulkDeleteReq
	12, // 17: bayard.index.IndexService.Commit:input_type -> bayard.index.CommitReq
	14, // 18: bayard.index.IndexService.Rollback:input_type -> bayard.index.RollbackReq
	16, // 19: bayard.index.IndexService.Merge:input_type -> bayard.index.MergeReq
	18, // 20: bayard.index.IndexService.Schema:input_type -> bayard.index.SchemaReq
	20, // 21: bayard.index.IndexService.Status:input_type -> bayard.index.StatusReq
	3,  // 22: bayard.index.IndexService.Get:output_type -> bayard.index.GetReply
	1,  // 23: bayard.index.IndexService.Search:output_type -> bayard.index.SearchReply
	5,  // 24: bayard.index.IndexService.Set:output_type -> bayard.index.SetReply
	7,  // 25: bayard.index.IndexService.Delete:output_type -> bayard.index.DeleteReply
	9,  // 26: bayard.index.IndexService.BulkSet:output_type -> bayard.index.BulkSetReply
	11, // 27: bayard.index.IndexService.BulkDelete:output_type -> bayard.index.BulkDeleteReply
	13, // 28: bayard.index.IndexService.Commit:output_type -> bayard.index.CommitReply
	15, // 29: bayard.index.IndexService.Rollback:output_type -> bayard.index.RollbackReply
	17, // 30: bayard.index.IndexService.Merge:output_type -> bayard.index.MergeReply
	19, // 31: bayard.index.IndexService.Schema:output_type -> bayard.index.SchemaReply
	21, // 32: bayard.index.IndexService.Status:output_type -> bayard.index.StatusReply
	22, // [22:33] is the sub-list for method output_type
	11, // [11:22] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_indexpb_proto_init() }
func file_indexpb_proto_init() {
	if File_indexpb_proto != nil {
		return
	}
	file_commonpb_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_indexpb_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexpb_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexpb_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexpb_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexpb_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexpb_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexpb_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexpb_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexpb_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkSetReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexpb_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkSetReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexpb_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkDeleteReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexpb_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkDeleteReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexpb_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexpb_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexpb_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RollbackReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexpb_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RollbackReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexpb_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MergeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexpb_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MergeReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexpb_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SchemaReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexpb_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SchemaReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexpb_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexpb_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_indexpb_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_indexpb_proto_goTypes,
		DependencyIndexes: file_indexpb_proto_depIdxs,
		MessageInfos:      file_indexpb_proto_msgTypes,
	}.Build()
	File_indexpb_proto = out.File
	file_indexpb_proto_rawDesc = nil
	file_indexpb_proto_goTypes = nil
	file_indexpb_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// IndexServiceClient is the client API for IndexService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type IndexServiceClient interface {
	Get(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*GetReply, error)
	Search(ctx context.Context, in *SearchReq, opts ...grpc.CallOption) (*SearchReply, error)
	Set(ctx context.Context, in *SetReq, opts ...grpc.CallOption) (*SetReply, error)
	Delete(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*DeleteReply, error)
	BulkSet(ctx context.Context, in *BulkSetReq, opts ...grpc.CallOption) (*BulkSetReply, error)
	BulkDelete(ctx context.Context, in *BulkDeleteReq, opts ...grpc.CallOption) (*BulkDeleteReply, error)
	Commit(ctx context.Context, in *CommitReq, opts ...grpc.CallOption) (*CommitReply, error)
	Rollback(ctx context.Context, in *RollbackReq, opts ...grpc.CallOption) (*RollbackReply, error)
	Merge(ctx context.Context, in *MergeReq, opts ...grpc.CallOption) (*MergeReply, error)
	Schema(ctx context.Context, in *SchemaReq, opts ...grpc.CallOption) (*SchemaReply, error)
	Status(ctx context.Context, in *StatusReq, opts ...grpc.CallOption) (*StatusReply, error)
}

type indexServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIndexServiceClient(cc grpc.ClientConnInterface) IndexServiceClient {
	return &indexServiceClient{cc}
}

func (c *indexServiceClient) Get(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*GetReply, error) {
	out := new(GetReply)
	err := c.cc.Invoke(ctx, "/bayard.index.IndexService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexServiceClient) Search(ctx context.Context, in *SearchReq, opts ...grpc.CallOption) (*SearchReply, error) {
	out := new(SearchReply)
	err := c.cc.Invoke(ctx, "/bayard.index.IndexService/Search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexServiceClient) Set(ctx context.Context, in *SetReq, opts ...grpc.CallOption) (*SetReply, error) {
	out := new(SetReply)
	err := c.cc.Invoke(ctx, "/bayard.index.IndexService/Set", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexServiceClient) Delete(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*DeleteReply, error) {
	out := new(DeleteReply)
	err := c.cc.Invoke(ctx, "/bayard.index.IndexService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexServiceClient) BulkSet(ctx context.Context, in *BulkSetReq, opts ...grpc.CallOption) (*BulkSetReply, error) {
	out := new(BulkSetReply)
	err := c.cc.Invoke(ctx, "/bayard.index.IndexService/BulkSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexServiceClient) BulkDelete(ctx context.Context, in *BulkDeleteReq, opts ...grpc.CallOption) (*BulkDeleteReply, error) {
	out := new(BulkDeleteReply)
	err := c.cc.Invoke(ctx, "/bayard.index.IndexService/BulkDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexServiceClient) Commit(ctx context.Context, in *CommitReq, opts ...grpc.CallOption) (*CommitReply, error) {
	out := new(CommitReply)
	err := c.cc.Invoke(ctx, "/bayard.index.IndexService/Commit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexServiceClient) Rollback(ctx context.Context, in *RollbackReq, opts ...grpc.CallOption) (*RollbackReply, error) {
	out := new(RollbackReply)
	err := c.cc.Invoke(ctx, "/bayard.index.IndexService/Rollback", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexServiceClient) Merge(ctx context.Context, in *MergeReq, opts ...grpc.CallOption) (*MergeReply, error) {
	out := new(MergeReply)
	err := c.cc.Invoke(ctx, "/bayard.index.IndexService/Merge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexServiceClient) Schema(ctx context.Context, in *SchemaReq, opts ...grpc.CallOption) (*SchemaReply, error) {
	out := new(SchemaReply)
	err := c.cc.Invoke(ctx, "/bayard.index.IndexService/Schema", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexServiceClient) Status(ctx context.Context, in *StatusReq, opts ...grpc.CallOption) (*StatusReply, error) {
	out := new(StatusReply)
	err := c.cc.Invoke(ctx, "/bayard.index.IndexService/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IndexServiceServer is the server API for IndexService service.
type IndexServiceServer interface {
	Get(context.Context, *GetReq) (*GetReply, error)
	Search(context.Context, *SearchReq) (*SearchReply, error)
	Set(context.Context, *SetReq) (*SetReply, error)
	Delete(context.Context, *DeleteReq) (*DeleteReply, error)
	BulkSet(context.Context, *BulkSetReq) (*BulkSetReply, error)
	BulkDelete(context.Context, *BulkDeleteReq) (*BulkDeleteReply, error)
	Commit(context.Context, *CommitReq) (*CommitReply, error)
	Rollback(context.Context, *RollbackReq) (*RollbackReply, error)
	Merge(context.Context, *MergeReq) (*MergeReply, error)
	Schema(context.Context, *SchemaReq) (*SchemaReply, error)
	Status(context.Context, *StatusReq) (*StatusReply, error)
}

// UnimplementedIndexServiceServer can be embedded to have forward compatible implementations.
type UnimplementedIndexServiceServer struct {
}

func (*UnimplementedIndexServiceServer) Get(context.Context, *GetReq) (*GetReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedIndexServiceServer) Search(context.Context, *SearchReq) (*SearchReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (*UnimplementedIndexServiceServer) Set(context.Context, *SetReq) (*SetReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (*UnimplementedIndexServiceServer) Delete(context.Context, *DeleteReq) (*DeleteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedIndexServiceServer) BulkSet(context.Context, *BulkSetReq) (*BulkSetReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkSet not implemented")
}
func (*UnimplementedIndexServiceServer) BulkDelete(context.Context, *BulkDeleteReq) (*BulkDeleteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkDelete not implemented")
}
func (*UnimplementedIndexServiceServer) Commit(context.Context, *CommitReq) (*CommitReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Commit not implemented")
}
func (*UnimplementedIndexServiceServer) Rollback(context.Context, *RollbackReq) (*RollbackReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rollback not implemented")
}
func (*UnimplementedIndexServiceServer) Merge(context.Context, *MergeReq) (*MergeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Merge not implemented")
}
func (*UnimplementedIndexServiceServer) Schema(context.Context, *SchemaReq) (*SchemaReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Schema not implemented")
}
func (*UnimplementedIndexServiceServer) Status(context.Context, *StatusReq) (*StatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}

func RegisterIndexServiceServer(s *grpc.Server, srv IndexServiceServer) {
	s.RegisterService(&_IndexService_serviceDesc, srv)
}

func _IndexService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bayard.index.IndexService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexServiceServer).Get(ctx, req.(*GetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexService_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexServiceServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bayard.index.IndexService/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexServiceServer).Search(ctx, req.(*SearchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexService_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexServiceServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bayard.index.IndexService/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexServiceServer).Set(ctx, req.(*SetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bayard.index.IndexService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexServiceServer).Delete(ctx, req.(*DeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexService_BulkSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkSetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexServiceServer).BulkSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bayard.index.IndexService/BulkSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexServiceServer).BulkSet(ctx, req.(*BulkSetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexService_BulkDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexServiceServer).BulkDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bayard.index.IndexService/BulkDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexServiceServer).BulkDelete(ctx, req.(*BulkDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexService_Commit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexServiceServer).Commit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bayard.index.IndexService/Commit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexServiceServer).Commit(ctx, req.(*CommitReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexService_Rollback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RollbackReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexServiceServer).Rollback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bayard.index.IndexService/Rollback",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexServiceServer).Rollback(ctx, req.(*RollbackReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexService_Merge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MergeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexServiceServer).Merge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bayard.index.IndexService/Merge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexServiceServer).Merge(ctx, req.(*MergeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexService_Schema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SchemaReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexServiceServer).Schema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bayard.index.IndexService/Schema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexServiceServer).Schema(ctx, req.(*SchemaReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexService_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexServiceServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bayard.index.IndexService/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexServiceServer).Status(ctx, req.(*StatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _IndexService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bayard.index.IndexService",
	HandlerType: (*IndexServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _IndexService_Get_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _IndexService_Search_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _IndexService_Set_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _IndexService_Delete_Handler,
		},
		{
			MethodName: "BulkSet",
			Handler:    _IndexService_BulkSet_Handler,
		},
		{
			MethodName: "BulkDelete",
			Handler:    _IndexService_BulkDelete_Handler,
		},
		{
			MethodName: "Commit",
			Handler:    _IndexService_Commit_Handler,
		},
		{
			MethodName: "Rollback",
			Handler:    _IndexService_Rollback_Handler,
		},
		{
			MethodName: "Merge",
			Handler:    _IndexService_Merge_Handler,
		},
		{
			MethodName: "Schema",
			Handler:    _IndexService_Schema_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _IndexService_Status_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "indexpb.proto",
}
